import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
from pypfopt import expected_returns, risk_models, EfficientFrontier, plotting
from scipy.stats import skew, kurtosis, norm


def get_data(tickers, start, end):
    """–ó–∞–≥–∑—Ä—É–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è –∏–∑ Yahoo"""
    data = yf.download(tickers, start=start, end=end)['Close'].dropna()
    return data


def get_returns_and_cov_matrix(data):
    """–î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞"""
    expected_annual_return = expected_returns.mean_historical_return(data)
    cov_matrix = risk_models.sample_cov(data)
    daily_returns = data.pct_change().dropna()
    return expected_annual_return, cov_matrix, daily_returns


def find_max_csr(
        ret, vol, weights, portf_returns, portf_mean, daily_rf,
        max_csr, best_csr_ret, best_csr_vol, best_csr_weights, alpha
        ):
    """–ü–æ–∏—Å–∫ –º–∞–∫–∏—Å–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ—ç—Ñ. –®–∞—Ä–ø–∞ —Å—Ä–µ–¥–∏ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤,
    –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏"""
    excess_returns = portf_returns - daily_rf  # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ –±–µ–∑—Ä–∏—Å–∫–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ –¥–µ–Ω—å.
    VaR = np.percentile(excess_returns, alpha * 100)  # –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Œ±-–∫–≤–∞–Ω—Ç–∏–ª–∏ ‚Äî —Ç–æ –µ—Å—Ç—å –ø–æ—Ç–µ—Ä—è –≤ —Ö—É–¥—à–∏–µ 5% –¥–Ω–µ–π.
    tail_losses = excess_returns[excess_returns <= VaR]  # —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ "—Ö–≤–æ—Å—Ç–µ" —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ‚Äî —Ç–µ, —á—Ç–æ –Ω–∏–∂–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã VaR

    CVaR = tail_losses.mean()
    csr = portf_mean / abs(CVaR)

    if csr > max_csr:
        max_csr, best_csr_ret, best_csr_vol = csr, ret, vol
        best_csr_weights = weights
    return max_csr, best_csr_ret, best_csr_vol, best_csr_weights


def find_max_modified_sharpe(
        z, portf_returns, portf_mean, daily_rf, portf_std,
        ret, vol, weights, max_msr, best_msr_ret, best_msr_vol,
        best_msr_weights
        ):
    """–ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—ç—Ñ. –®–∞—Ä–ø–∞ —Å—Ä–µ–¥–∏ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤,
    –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏"""
    portf_skew = skew(portf_returns)
    portf_kurtosis = kurtosis(portf_returns, fisher=True)

    z_cf = (
        z
        + (1 / 6) * (z**2 - 1) * portf_skew
        + (1 / 24) * (z**3 - 3 * z) * portf_kurtosis
        - (1 / 36) * (2 * z**3 - 5 * z) * (portf_skew**2)
    )
    if z_cf * portf_std != 0:
        modified_sharpe = (portf_mean - daily_rf) / (z_cf * portf_std)
        if modified_sharpe > max_msr:
            max_msr, best_msr_ret, best_msr_vol = modified_sharpe, ret, vol
            best_msr_weights = weights
    return max_msr, best_msr_ret, best_msr_vol, best_msr_weights


def generate_portfolios(num_portfolios, tickers, expected_return, cov_matrix,
                        rf, daily_rf, ALPHA, min_vol_return, daily_returns, bounds
                        ):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è n-–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤–µ—Å–æ–≤ –∞–∫—Ç–∏–≤–æ–≤ –∏ –º–∞—Å—Å–∏–≤–∞,
    # –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª—è–º.
    results = np.zeros((3, num_portfolios))
    weights_record = []

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å,
    # –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ –≤–µ—Å–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏ –º–æ–¥–∏—Ñ. –∫–æ—ç—Ñ. –®–∞—Ä–ø–∞,
    # –∞ —Ç–∞–∫–∂–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –º–∏–Ω. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é (—Å –æ–≥—Ä. –Ω–∞ –º–∏–Ω. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)
    max_csr = -np.inf
    best_csr_ret = None
    best_csr_vol = None
    best_csr_weights = None

    max_msr = -np.inf
    best_msr_ret = None
    best_msr_vol = None
    best_msr_weights = None

    mv_vol = np.inf
    mv_ret = None
    mv_weights = None
    mv_sharpe = None

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π ("–æ–±–ª–∞–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    for i in range(num_portfolios):
        low_bound, high_bound = zip(*bounds)
        while True:
            weights = np.random.uniform(low_bound, high_bound)
            weights /= weights.sum()
            if all(low_b <= w <= high_b for w, low_b, high_b in zip(
                weights, low_bound, high_bound
            )):
                break
        weights_record.append(weights)

        portf_returns = daily_returns.dot(weights)
        portf_mean = portf_returns.mean()
        portf_std = portf_returns.std()
        ret = np.dot(weights, expected_return)
        vol = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
        sharpe = (ret - rf) / vol

        results[0, i] = vol
        results[1, i] = ret
        results[2, i] = sharpe

        # –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –º–∏–Ω. –¥–æ—Ö–æ–¥.
        if vol <= mv_vol and ret >= min_vol_return:
            mv_ret, mv_vol, mv_sharpe, mv_weights = ret, vol, sharpe, weights

        # –ú–∞–∫—Å. CSR
        max_csr, best_csr_ret, best_csr_vol, best_csr_weights = find_max_csr(
            ret, vol, weights, portf_returns, portf_mean, daily_rf,
            max_csr, best_csr_ret, best_csr_vol, best_csr_weights, ALPHA
            )

        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–Ω—ã–π –∫–æ—ç—Ñ. –®–∞—Ä–ø–∞
        max_msr, best_msr_ret, best_msr_vol, best_msr_weights = find_max_modified_sharpe(
            z, portf_returns, portf_mean, daily_rf, portf_std,
            ret, vol, weights, max_msr, best_msr_ret,
            best_msr_vol, best_msr_weights
            )

    inf_min_vol_portf = {'ret': mv_ret, 'vol': mv_vol,
                         'sharpe': mv_sharpe, 'weights': mv_weights
                         }
    inf_max_csr = {'max_csr': max_csr, 'ret': best_csr_ret,
                   'vol': best_csr_vol,
                   'weights': best_csr_weights
                   }
    inf_max_msr = {'max_msr': max_msr, 'ret': best_msr_ret,
                   'vol': best_msr_vol,
                   'weights': best_msr_weights
                   }

    return results, weights_record, inf_max_csr, inf_max_msr, inf_min_vol_portf


if __name__ == '__main__':
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    NUM_PORTFOLIOS = 70000
    RISK_FREE_RATE = 0.0469
    ALPHA = 0.01
    MIN_VOLATILITY_RETURN = 0.4448

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
    daily_rf = RISK_FREE_RATE / 252
    z = norm.ppf(1 - ALPHA)

    tickers = [
        'AAPL', 'ASML', 'CME', 'DXCM', 'EQIX', 'IDXX', 'IRDM', 'IRM',
        'AVGO', 'NVDL', 'QQQ'
        ]

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤–µ—Å–∞ –∞–∫—Ç–∏–≤–æ–≤
    bounds = [(0.015, 0.21)] * len(tickers)

    data_2023 = get_data(tickers, '2023-01-01', '2023-12-31')

    expected_annual_return_2023, cov_matrix_2023, daily_returns_2023 = get_returns_and_cov_matrix(data_2023)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
    ef = EfficientFrontier(expected_annual_return_2023, cov_matrix_2023, weight_bounds=bounds)
    fig, ax = plt.subplots(figsize=(10, 7))
    plotting.plot_efficient_frontier(ef, ax=ax,
                                     show_assets=False)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è '–æ–±–ª–∞–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', CSR, MSR –∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –º–∏–Ω. –≤–æ–ª.
    results, weights_record, inf_max_csr, inf_max_msr, inf_min_vol_portf = generate_portfolios(
        NUM_PORTFOLIOS, tickers, expected_annual_return_2023, cov_matrix_2023,
        RISK_FREE_RATE, daily_rf, ALPHA, MIN_VOLATILITY_RETURN,
        daily_returns_2023, bounds
        )

    # –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –®–∞—Ä–ø–∞
    ef = EfficientFrontier(
        expected_annual_return_2023, cov_matrix_2023, weight_bounds=bounds
        )
    ef.max_sharpe()
    max_sharpe_ret, max_sharpe_vol, max_sharpe_sharpe = ef.portfolio_performance()

    # –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ —Ä–∏—Å–∫
    ef_max_rt = EfficientFrontier(
        expected_annual_return_2023, cov_matrix_2023, weight_bounds=bounds
        )
    ef_max_rt.efficient_risk(target_volatility=0.1727)
    max_rt_ret, max_rt_vol, max_rt_sharpe = ef_max_rt.portfolio_performance()

    # –†–∞–≤–Ω–æ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
    eq_weights = np.array([1/len(tickers)] * len(tickers))
    eq_ret = np.dot(eq_weights, expected_annual_return_2023)
    eq_vol = np.sqrt(np.dot(eq_weights.T, np.dot(cov_matrix_2023, eq_weights)))
    eq_sharp = (eq_ret - RISK_FREE_RATE) / eq_vol

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–¥–∞–Ω–Ω—ã–µ –∑–∞ 2024 –≥)
    data_2024 = get_data(tickers, '2024-01-01', '2024-12-31')
    expected_annual_return_2024, cov_matrix_2024, daily_returns_2024 = get_returns_and_cov_matrix(data_2024)
    portf_2024_weights = np.array(list(ef.clean_weights().values()))
    portf_2024_ret = np.dot(portf_2024_weights, expected_annual_return_2024)
    portf_2024_vol = np.sqrt(np.dot(
        portf_2024_weights.T, np.dot(cov_matrix_2024, portf_2024_weights)))

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
    print(f'\nüìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—ç—Ñ. –®–∞—Ä–ø–∞: {inf_max_csr['max_csr']:.4f}')
    print('–í–µ—Å–∞ —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:')
    for ticker, weight in zip(tickers, inf_max_csr['weights']):
        print(f'{ticker}: {weight:.2%}')

    print(f'\nüìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ—ç—Ñ. –®–∞—Ä–ø–∞: {inf_max_msr['max_msr']:.4f}')
    print('–í–µ—Å–∞ —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:')
    for ticker, weight in zip(tickers, inf_max_msr['weights']):
        print(f'{ticker}: {weight:.2%}')

    print(f'\nüìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {max_sharpe_sharpe:.4f}')
    print('–í–µ—Å–∞ —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:')
    for ticker, weight in zip(tickers, ef.clean_weights().values()):
        print(f'{ticker}: {weight:.2%}')

    print('\nüìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å –æ–≥—Ä. –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å):')
    print(f'Sharpe: {inf_min_vol_portf['sharpe']:.4f}, –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {inf_min_vol_portf['ret']:.4f}, –†–∏—Å–∫: {inf_min_vol_portf['vol']:.4f}')
    print('–í–µ—Å–∞ —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:')
    for ticker, weight in zip(tickers, inf_min_vol_portf['weights']):
        print(f"{ticker}: {weight:.2%}")

    print('\nüìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (—Å –æ–≥—Ä. –Ω–∞ —Ä–∏—Å–∫):')
    print(f'Sharpe: {max_rt_sharpe:.4f}, –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {max_rt_ret:.4f}, –†–∏—Å–∫: {max_rt_vol:.4f}')
    print('–í–µ—Å–∞ —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:')
    for ticker, weight in zip(tickers, ef_max_rt.clean_weights().values()):
        print(f'{ticker}: {weight:.2%}')

    print('\nüìä –†–∞–≤–Ω–æ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:')
    print(f'Sharpe: {eq_sharp:.4f}, –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {eq_ret:.4f}, –†–∏—Å–∫: {eq_vol:.4f}')
    print('–í–µ—Å–∞ —Ä–∞–≤–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤:')
    for ticker, weight in zip(tickers, eq_weights):
        print(f'{ticker}: {weight:.2%}')

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    scatter = ax.scatter(
        results[0, :], results[1, :], c=results[2, :], cmap='viridis', alpha=0.4
        )
    cbar = plt.colorbar(scatter, ax=ax)
    cbar.set_label('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞')

    ax.scatter(max_sharpe_vol, max_sharpe_ret, marker='*', color='r', s=200,
               label='–ú–∞–∫—Å. –∫–æ—ç—Ñ. –®–∞—Ä–ø (–≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å 2023 –≥.)', alpha=1
               )
    ax.scatter(inf_min_vol_portf['vol'], inf_min_vol_portf['ret'],
               marker='*', color='b', s=200, label='–ú–∏–Ω. –≤–æ–ª–∞—Ç.', alpha=0.7
               )
    ax.scatter(
        eq_vol, eq_ret, marker='*', color='black', s=200,
        label='–†–∞–≤–Ω–æ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π', alpha=0.7
        )
    ax.scatter(
        inf_max_csr['vol'], inf_max_csr['ret'],
        marker='*', color='grey', s=200, label='–ú–∞–∫—Å. –ö–æ–Ω–¥–∏—Ü. –∫–æ—ç—Ñ. –®–∞—Ä–ø–∞',
        alpha=0.7
        )
    ax.scatter(
        inf_max_msr['vol'], inf_max_msr['ret'],
        marker='*', color='orange', s=200, label='–ú–∞–∫—Å. –ú–æ–¥–∏—Ñ. –∫–æ—ç—Ñ. –®–∞—Ä–ø–∞',
        alpha=0.7
        )
    ax.scatter(
        max_rt_vol, max_rt_ret, marker='*', color='green', s=200,
        label='–ú–∞–∫—Å. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', alpha=0.7
        )
    ax.scatter(
        portf_2024_vol, portf_2024_ret, marker='*', color='magenta', s=180,
        label='–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (2024 –≥.)', alpha=1
        )

    ax.set_title('–ì—Ä–∞–Ω–∏—Ü–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
    ax.set_xlabel('–†–∏—Å–∫ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)')
    ax.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å')
    ax.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.savefig('efficient_frontier_nasdaq.png', dpi=300, bbox_inches='tight')
    plt.show()
